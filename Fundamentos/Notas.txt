TIPOS DE VARIABLES Y DATOS.
  Las variables son contenedores que almacenan los datos durante la ejecucion del programa
  Los tipos de datos que hay en java son:
  Primitivos: son los de tipo int,double,string,chat,float,boolean.
  No primitivos: pertenecen a las clases, matrices e interfaces.


FUNCIONES
  Una funcion es un bloque de codigo que se puede repetir en distintas ocaciones.Este se declara fuera del metodo main.
  Declaracion del metodo:

  Forma 1: convirtiendo la funcion en estatica.

    public static double SumarNumero(double numero1,double numero2){
      return numero1 + numero2;
    }
  Forma 2: creando una unstancia de la clase principal.
    public double SumarNumero(double numero1, double numero2){
      return numero1 + numero2;
    }

  Llamado del metodo
  Forma 1: 
    SumarNumero(valor1,valor2)  
  
  Forma 2: 
    (nombre de la clase principal)==> Funciones funciones = new Funciones();
    funciones.SumarNumero(valor1,valor2)
    

OPERADORES DE ASIGNACION:
  Existen los operadores para arealizar operaciones basicas como lo son:
  + , - , * , / , % 

  También están metodos de la clase Math:

  abs(double a): Devuelve el valor absoluto de un valor double.
  abs(float a): Devuelve el valor absoluto de un valor float.
  abs(int a): Devuelve el valor absoluto de un valor int.
  abs(long a): Devuelve el valor absoluto de un valor long.

  (Valor maximo y minimo)
  max(double a, double b): Devuelve el mayor de dos valores double.
  max(float a, float b): Devuelve el mayor de dos valores float.
  max(int a, int b): Devuelve el mayor de dos valores int.
  max(long a, long b): Devuelve el mayor de dos valores long.
  min(double a, double b): Devuelve el menor de dos valores double.
  min(float a, float b): Devuelve el menor de dos valores float.
  min(int a, int b): Devuelve el menor de dos valores int.
  min(long a, long b): Devuelve el menor de dos valores long.

  (Redondeo)
  ceil(double a): Devuelve el menor valor double que es mayor o igual a a y es un entero.
  floor(double a): Devuelve el mayor valor double que es menor o igual a a y es un entero.
  rint(double a): Devuelve el valor double que es más cercano al entero más cercano a a.
  round(double a): Devuelve el valor long que es más cercano al entero más cercano a a.
  round(float a): Devuelve el valor int que es más cercano al entero más cercano a a.

  (Exponenciación y algoritmos)
  exp(double a): Devuelve e elevado a la potencia de a.
  expm1(double x): Devuelve e elevado a la potencia de x menos uno.
  log(double a): Devuelve el logaritmo natural (base e) de a.
  log10(double a): Devuelve el logaritmo en base 10 de a.
  log1p(double x): Devuelve el logaritmo natural de 1 + x.

  (Potencias y raices)
  exp(double a): Devuelve e elevado a la potencia de a.
  expm1(double x): Devuelve e elevado a la potencia de x menos uno.
  log(double a): Devuelve el logaritmo natural (base e) de a.
  log10(double a): Devuelve el logaritmo en base 10 de a.
  log1p(double x): Devuelve el logaritmo natural de 1 + x.

  (Genera numeros aleatoreos)
  randon(): devuelve un número aleatoreo double mayor o igual que '0.0' y menor que '1.0'

Loops:
  Son sentencias siclicas, se utilizan cuando es necesario repetir un bloque de codigo
  
  (For)
  El siclo for se utliza cuando se conoce el numero exacto de iteraciones a realizar.
  Declaración:
  for(declaracion;condicional;incremento-decremento){cuerpo de ejecucion}

  (while)
  El siclo while se utiliza cuando no se conoce el numero de iiteraciones a realizar.
  Declaración:
  while(condicion){cuerpo de ejecucion}

  (do while)
  El siclo de ejecucion "do while" se utiliza cuando no se conoce el numero de iteraciones Y
  se debe ejecutar almenos 1 vez.
  Declaracion:
  do {cuerpo de ejecucion} while(condicion)

  (forEach)
  El siclo "forEach" es utlizado para recorrer matrices o colecciones.
  Declaracion:
  for(data_type variable:array_name){código de ejecucion}

Excepciones:
  Las excepcionas se usan para manejar bloques de codigo que podrian llegar a presentar
  alguna falla y estas interrumpar el flujo de la la aplicación y se 
  interrumpa abruptamente.

  Uso:
  Estos se manejan a travez del uso de Try/Catch/Finally.
  try{
    "intenta ejecutar este bloque de codigo"
  }catch(codigo del error e){
    System.out.println("Se produjo un error tal")
  }finally{
    "este bloque de codigo siempre se ejecuta independientemente si el codigo es 
    interrumpido o no"
  }

  Los codigos de error más comunes son:
  1._ArithmeticException: Ocurre cuando se intenta una operación aritmética ilegal, como la división por cero.
  2._ArrayIndexOutOfBoundsException: Ocurre cuando se intenta acceder a un índice fuera de los límites de un array.
  3._NullPointerException: Ocurre cuando se intenta utilizar un objeto que no ha sido inicializado (es null).
  4._NumberFormatException: Ocurre cuando se intenta convertir una cadena a un número en un formato no válido.

Estructuras de datos:
  Arrays:
    Es una colección de elementos que almacena el mismo tipo de dato,accediendo a estos mediante un indice.
    -Tamaño fijo.
    -Acceso rápido mediante indice.

    Declaracion:
    (tipo de dato)  (nombre)      (almacena los datos)
          string    Nombres[]  =  {"luis","yair","rios","miranda"}; 
    
    Gestion:
    1.- llenar un posición en espesifico del array.
      Array.fill(array,fromIndex,toIndex,value);

    2.- Comparar arrays.
      boolean resultado = Array.equals(array1,array2);
      boolean resultado = Array.deepEquals(array1,array2); *para array anidados.

    3.- Convertir array en string.
      String Array.toString(Array);
      String Array.deepToString(Array); *para array multidimencionales.

    4.- Ordenar array.
      Array.sort(intArray);
  
  Listas:
    Estructuras de datos dinamicas que pueden cambiar de tamaño.

    1.- List.
      ArrayList es una lista redimencionable basada en un array.
      -Accede rápido a los elementos.
      -Lento para ingresarlos.
      
      Declaración:
      ArrayList<String> nombres = new ArrayList<>();
      nombres.add("Luis");
      System.out.println(nombres.get(0));
    
    2.- LinkedList.
      Lista basada en nodos enlazados.
      -Rápida para ingresar elementos.
      -Lenta para acceder.

      Declaracion:
      LinkedList<String> nombres = new LinkedList<>();
      nombres.add("Luis");
      System.out.println(nombres.get(0));
  
  Conjuntos (Sets):
    Colección que no permite elementos duplicados.

    Declaracion:
    HashSet<String> nombres = new HashSet<>();
    nombres.add("Luis");
    nombres.add("Yair");
    nombres.add("Luis"); //No se agregara porque es un elemento repetido.

    System.out.println(nombres.size()); Imprime 2 elementos.
  
  Mapas (maps):
    Estructura que asocia datos por clave/valor.

    Declaracion:
    HashMap<String, Integer> edades = new HashMap<>();
    edades.put("Luis",25);
    
    System.out.println(nombres.get("Luis")); //Imprime 25.

  
  Pilas (Stacks):
    Estructura de datos LIFO (Last in,Last Out).

    Declaracion:
    Stack<String> pila = new Stack<>();
    pila.push("Luis");
    
    System.out.println(pila.pop()); //Imprime "Luis".
  
  Colas (Queues):
    Estructura de datos de tipo FIFO (Firt in, First Out).

    Declaracion:
    Queues<String> cola = new LinkedList<>();
    cola.add("Luis");

    System.out.println(cola.poll()); //Imprime "Luis".

  Deques (Double-ended Queues):
    Es un cola doblemente terminada que permite la insercion y eliminación de elementos
    por ambos extremos.

    Declaracion:
    Deque<String> deque = new LinkedList<>();
    deque.addFirst("Luis");
    deque.addFirst("Yair");

    System.out.println(deque.removeFirst()); //Imprime "Luis".
    System.out.println(deque.removeLast()); //Imprime "Yair".

  Resumen: 
    Arreglos (Arrays): Tamaño fijo, acceso rápido por índice.
    Listas (Lists): Tamaño dinámico, ArrayList es rápida para acceder, LinkedList es rápida para insertar/eliminar.
    Conjuntos (Sets): No permite duplicados, HashSet es la implementación más común.
    Mapas (Maps): Asociaciones clave-valor, HashMap es la implementación más común.
    Pilas (Stacks): LIFO, usa la clase Stack.
    Colas (Queues): FIFO, LinkedList es una implementación común.
    Deques: Inserción y eliminación por ambos extremos, LinkedList es una implementación común.


  
  

