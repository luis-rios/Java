TIPOS DE VARIABLES Y DATOS.
  Las variables son contenedores que almacenan los datos durante la ejecucion del programa
  Los tipos de datos que hay en java son:
  Primitivos: son los de tipo int,double,string,chat,float,boolean,final(const).
  No primitivos: pertenecen a las clases, matrices e interfaces.


FUNCIONES
  Una funcion es un bloque de codigo que se puede repetir en distintas ocaciones.Este se declara fuera del metodo main.
  Declaracion del metodo:

  Forma 1: convirtiendo la funcion en estatica.

    public static double SumarNumero(double numero1,double numero2){
      return numero1 + numero2;
    }
  Forma 2: creando una instancia de la clase principal.
    public double SumarNumero(double numero1, double numero2){
      return numero1 + numero2;
    }

  Llamado del metodo:
    Forma 1: 
      SumarNumero(valor1,valor2)  
    
    Forma 2: 
      (nombre de la clase principal)==> Funciones funciones = new Funciones();
      funciones.SumarNumero(valor1,valor2)
  
  Declalracion:
    Forma1:
      public void nombreFuncion(){} ==> "Tiene acceso fuera y dentro de la clase"
    Forma2:
      void nombreFuncion(){} ==> "Es accesible solo dentro del mismo paquete"
    

OPERADORES DE ASIGNACION:
  Existen los operadores para arealizar operaciones basicas como lo son:
  + , - , * , / , % 

  También están metodos de la clase Math:

  abs(double a): Devuelve el valor absoluto de un valor double.
  abs(float a): Devuelve el valor absoluto de un valor float.
  abs(int a): Devuelve el valor absoluto de un valor int.
  abs(long a): Devuelve el valor absoluto de un valor long.

  (Valor maximo y minimo)
  max(double a, double b): Devuelve el mayor de dos valores double.
  max(float a, float b): Devuelve el mayor de dos valores float.
  max(int a, int b): Devuelve el mayor de dos valores int.
  max(long a, long b): Devuelve el mayor de dos valores long.
  min(double a, double b): Devuelve el menor de dos valores double.
  min(float a, float b): Devuelve el menor de dos valores float.
  min(int a, int b): Devuelve el menor de dos valores int.
  min(long a, long b): Devuelve el menor de dos valores long.

  (Redondeo)
  ceil(double a): Devuelve el menor valor double que es mayor o igual a a y es un entero.
  floor(double a): Devuelve el mayor valor double que es menor o igual a a y es un entero.
  rint(double a): Devuelve el valor double que es más cercano al entero más cercano a a.
  round(double a): Devuelve el valor long que es más cercano al entero más cercano a a.
  round(float a): Devuelve el valor int que es más cercano al entero más cercano a a.

  (Exponenciación y algoritmos)
  exp(double a): Devuelve e elevado a la potencia de a.
  expm1(double x): Devuelve e elevado a la potencia de x menos uno.
  log(double a): Devuelve el logaritmo natural (base e) de a.
  log10(double a): Devuelve el logaritmo en base 10 de a.
  log1p(double x): Devuelve el logaritmo natural de 1 + x.

  (Potencias y raices)
  exp(double a): Devuelve e elevado a la potencia de a.
  expm1(double x): Devuelve e elevado a la potencia de x menos uno.
  log(double a): Devuelve el logaritmo natural (base e) de a.
  log10(double a): Devuelve el logaritmo en base 10 de a.
  log1p(double x): Devuelve el logaritmo natural de 1 + x.

  (Genera numeros aleatoreos)
  randon(): devuelve un número aleatoreo double mayor o igual que '0.0' y menor que '1.0'

  (Convertir un de untipo de dato a otro)
  (int),(float),(String)
  
Loops:
  Son sentencias siclicas, se utilizan cuando es necesario repetir un bloque de codigo
  
  (For)
  El siclo for se utliza cuando se conoce el numero exacto de iteraciones a realizar.
  Declaración:
  for(declaracion;condicional;incremento-decremento){cuerpo de ejecucion}

  (while)
  El siclo while se utiliza cuando no se conoce el numero de iiteraciones a realizar.
  Declaración:
  while(condicion){cuerpo de ejecucion}

  (do while)
  El siclo de ejecucion "do while" se utiliza cuando no se conoce el numero de iteraciones Y
  se debe ejecutar almenos 1 vez.
  Declaracion:
  do {cuerpo de ejecucion} while(condicion)

  (forEach)
  El siclo "forEach" es utlizado para recorrer matrices o colecciones.
  Declaracion:
  for(data_type variable:array_name){código de ejecucion}

Excepciones:
  Las excepcionas se usan para manejar bloques de codigo que podrian llegar a presentar
  alguna falla y estas interrumpar el flujo de la la aplicación y se 
  interrumpa abruptamente.

  Uso:
  Estos se manejan a travez del uso de Try/Catch/Finally.
  try{
    "intenta ejecutar este bloque de codigo"
  }catch(codigo del error e){
    System.out.println("Se produjo un error tal")
  }finally{
    "este bloque de codigo siempre se ejecuta independientemente si el codigo es 
    interrumpido o no"
  }

  Los codigos de error más comunes son:
  1._ArithmeticException: Ocurre cuando se intenta una operación aritmética ilegal, como la división por cero.
  2._ArrayIndexOutOfBoundsException: Ocurre cuando se intenta acceder a un índice fuera de los límites de un array.
  3._NullPointerException: Ocurre cuando se intenta utilizar un objeto que no ha sido inicializado (es null).
  4._NumberFormatException: Ocurre cuando se intenta convertir una cadena a un número en un formato no válido.

Estructuras de datos:
  Arrays:
    Es una colección de elementos que almacena el mismo tipo de dato,accediendo a estos mediante un indice.
    -Tamaño fijo.
    -Acceso rápido mediante indice.

    Declaracion:
    (tipo de dato)  (nombre)      (almacena los datos)
          string    Nombres[]  =  {"luis","yair","rios","miranda"}; 
    
    Gestion:
    1.- llenar una posición en espesifico del array.
      Array.fill(array,fromIndex,toIndex,value);

    2.- Comparar arrays.
      boolean resultado = Array.equals(array1,array2);
      boolean resultado = Array.deepEquals(array1,array2); *para array anidados.

    3.- Convertir array en string.
      String Array.toString(Array);
      String Array.deepToString(Array); *para array multidimencionales.

    4.- Ordenar array.
      Array.sort(intArray);
    
    5.- Instanciar con valor por defecto.
      int ArrayEnteros [] = new int[5] -> se crea con un valor de 5 espacios.
      String ArrayNombres [] = new String[2] -> se crea con un valor de 2 espacios.
      
  
  Listas:
    Estructuras de datos dinamicas que pueden cambiar de tamaño.

    1.- List.
      ArrayList es una lista redimencionable basada en un array.
      -Accede rápido a los elementos.
      -Lento para ingresarlos.
      
      Declaración:
      ArrayList<String> nombres = new ArrayList<>();
      nombres.add("Luis");
      System.out.println(nombres.get(0));
    
    2.- LinkedList.
      Lista basada en nodos enlazados.
      -Rápida para ingresar elementos.
      -Lenta para acceder.

      Declaracion:
      LinkedList<String> nombres = new LinkedList<>();
      nombres.add("Luis");
      System.out.println(nombres.get(0));
    
    metodos:
      ArrayList (List):
      add(E e): Agrega elementos a la lista.
      get(int index): Accede a un elemento en el índice especificado.
      set(int index, E element): Reemplaza el elemento en el índice especificado.
      remove(int index): Elimina el elemento en el índice especificado.
      contains(Object o): Verifica si la lista contiene el elemento especificado.
      size(): Obtiene el tamaño de la lista.
      iterator(): Itera sobre los elementos de la lista.
      subList(int fromIndex, int toIndex): Crea una sublista de la lista original.

  
  Conjuntos (Sets):
    Colección que no permite elementos duplicados.

    Declaracion:
    HashSet<String> nombres = new HashSet<>();
    nombres.add("Luis");
    nombres.add("Yair");
    nombres.add("Luis"); //No se agregara porque es un elemento repetido.

    System.out.println(nombres.size()); Imprime 2 elementos.
    
    Metodos:
      HashSet (Set):
      add(E e): Agrega elementos al conjunto.
      contains(Object o): Verifica si el conjunto contiene el elemento especificado.
      remove(Object o): Elimina el elemento especificado del conjunto.
      size(): Obtiene el tamaño del conjunto.
      iterator(): Itera sobre los elementos del conjunto.

  Mapas (maps):
    Estructura que asocia datos por clave/valor.

    Declaracion:
    HashMap<String, Integer> edades = new HashMap<>();
    edades.put("Luis",25);
    
    System.out.println(nombres.get("Luis")); //Imprime 25.

  
  Pilas (Stacks):
    Estructura de datos LIFO (Last in,Last Out).

    Declaracion:
    Stack<String> pila = new Stack<>();
    pila.push("Luis");
    
    System.out.println(pila.pop()); //Imprime "Luis".
  
  Colas (Queues):
    Estructura de datos de tipo FIFO (Firt in, First Out).

    Declaracion:
    Queue<String> cola = new LinkedList<>();
    Queue<Integer> cola2 = new LinkedList<>();
    cola.add("Luis");

    System.out.println(cola.poll()); //Imprime "Luis".
    
    Metodos:
      LinkedList (Queue):
      offer(E e): Agrega elementos a la cola.
      peek(): Accede al primer elemento de la cola sin eliminarlo.
      poll(): Accede y elimina el primer elemento de la cola.
      remove(): Elimina el primer elemento de la cola.
      isEmpty(): Verifica si la cola está vacía.
      size(): Obtiene el tamaño de la cola.
      clear(): Elimina todos los elementos de la cola.  



  Deques (Double-ended Queues):
    Es un cola doblemente terminada que permite la insercion y eliminación de elementos
    por ambos extremos.

    Declaracion:
    Deque<String> deque = new LinkedList<>();
    deque.addFirst("Luis");
    deque.addFirst("Yair");

    System.out.println(deque.removeFirst()); //Imprime "Luis".
    System.out.println(deque.removeLast()); //Imprime "Yair".

  Resumen: 
    Arreglos (Arrays): Tamaño fijo, acceso rápido por índice.
    Listas (Lists): Tamaño dinámico, ArrayList es rápida para acceder, LinkedList es rápida para insertar/eliminar.
    Conjuntos (Sets): No permite duplicados, HashSet es la implementación más común.
    Mapas (Maps): Asociaciones clave-valor, HashMap es la implementación más común.
    Pilas (Stacks): LIFO, usa la clase Stack.
    Colas (Queues): FIFO, LinkedList es una implementación común.
    Deques: Inserción y eliminación por ambos extremos, LinkedList es una implementación común.

POO:
  Class:
    Plantilla o modulo que define un objeto. Las clases encapsulan datos y comportamientos que son comunes al mismo tipo de objeto.
    -Los datos son representados por atributos/caracteristicas del objeto.
    -Los comportamientos son las funciones/acciones a ejecutar del objeto.
    -Las instancias son objetos creados apartir de esa clase.
    -Los constructores son llamados al momento de crear una instancia, estos se utilizan para asignar los valores a los atributos.

    Declaracion:
    public class "nombre de la clase"{
        //Atributos pribados
        private int edad;
        private String nombre;

        //Constructor
        public Persona(int edad,String nombre){
            this.edad = edad;
            this.nombre = nombre
        }
        //Metodos
        public int getEdad(){
            return edad;
        }
        public void setEdad(int edad){
            this.edad = edad;
        }

        public String getNombre(){
            return nombre;
        }
        public void setNombre(String nombre){
            this.nombre = nombre;
        }
    }
    Crear instancia de la clase:
        public staic void main(String[] args){
            Person person1 = new Persona(29,"Skoll"); //Se pueden declarar los atributos por defecto desde la  instancia de la clase.

            //Declarar atributos después de la instancia.
            persona1.setEdad(29);
            persona1.setNombre("Skoll");

            //Obteniendo valores.
            persona1.getEdad();
            persona1.getNombre();
        }
  Encapsulamiento:
    (Detalles de implementación no sean visibles para los usuarios)
    Mantener ocultas las variables de clase ante otras clases,accesibles solo mediante 
    los metodos de la clase actual.
    Mantener las variables privadas y acceder a ellas solo mediante los metodos set,get.

    caracteristicas:
      -Control del acceso a las variables por los metodos set,get.
      -Mallor flexibilidad para cambiar el código.
      -Habilidad para cambiar una parte del código sin afectar otras pastes.
    
    Declaracion:
      class Persona{
        private String nombre = "";
        public staic setNombre(String name){
          this.nombre = name;
        }
      }
  Herencia:
    La herencia permite que las clases heredades/hijas/sub-clases, hereden las 
    caracteristicas y funciones de la clase padre.

    Declaracion:
      public class Animal{
        protected String nombre="";
        protected int edad =0;
        public Animal(String nombre,int edad){
          this.nombre = nombre;
          this.edad = edad;
        }
        public void hacerRuido(){
          System.out.prinln("ruido")
        }
      }
      public class Perro extends Animal{
        String raza;
        public Perro(){
          super(); => "llamada al constructor de la súper clase"
        }
        public void ladrar(){
          System.out.prinln("ladrar")
        }
        public static void main(String[]args){
          Perro perro = new Perro();
          perro.nombre="taizon";
          perro.raza = "pastor belga";
        }
      }
    caracteristicas:
      -Reutilizar código.
      -Código más organizado
      

  Polimorfismo:
    (muchas formas) utilizar los metodos de las subclases a traves de una REFERENCIA 
    de la clase principal,solo cambiando las caracteristicas pero teniendo la misma función.
    
    Declalracion:
      public class Vehiculo{
        private String tipo;
        public void Vehiculo(String tipo){
          this.tipo = tipo;
        } 
        public String getTipo(){
          return tipo;
        }        
        */metodo en comun\*
        public void moverse(){
          System.out.println("El Vehiculo se mueve");
        }
      }
      public class Coche extends Vehiculo{
        super("coche");
        public String moverse(){
            System.out.println("El Vehiculose mueve en 4 ruedas");
        }
      }
      public class Bisicleta extends Vehiculo{
        super("bisicleta");
        public String moverse(){
            System.out.println("El Vehiculose mueve en 2 ruedas");            
        }
      }
      public class Main{
        public static  void main String(args[]){
          Vehiculo[] Vehiculos = new Vehiculo[2]; ===>creando referencia de la clase principal de tipo array
          Vehiculos[0] = new Coche(); ===>creando un objeto de tipo coche 
          Vehiculo[1] = new Bisicleta(); ===>creando un obejeto de tipo bisicleta

          for(Vehiculo vehiculo: vehiculos){
            System.out.println("Este es un " + vehiculo.getTipo());
            vehiculo.moverse();
          }
        }
      }
    Caracteristicas:
    -
  Abstracción:
    Ocultar los detalles complejos y solo mostrar las funcionales,mediante clases 
    abstractas he interfaces.
    crear una clase con metodos y funciones abstractas, estos tienen caracteristicas y 
    funciones sin ser definidas(Declaracion sin implementación).
    -Ejemplo:
      una botella,tiene un material,capacidad,color,pero no define espesificamente cuales son.

    Declalracion:
      Abstract class Embase{

      }

    Caracteristicas:
      -No pueden ser instanciadas(no tienen un contructor),solo heredadas.
      -Ningun metodo ni propiedad tienen un valor.
      -Al ser de tipo abstracto,por de defecto son publicas.
    

DETALLES:
  Modificador de acceso:
    public => este tiene acceso desde cualquier otra clase.
    private => solo tiene acceso dentro de la misma clase.
    protected => tiene acceso cualquier clase dentro del mismo paquete y sub-clases.
    default => tiene acceso dentro del mismo paquete.
  
  static:
    Con este no es ne cesario crear una instancia para tener acceso a el.
  
  void:
    Es el tipo de dato que retornara.

  final:
    No puede ser redefinido.

  sobrecarga:
    puedes declarar el mismo metodo 2 veces (mismo nombre)con diferentes 
    parametros de retorno

  Scanner:
    declara un scanner para cualquier clase.
    public static final Scanner scanner = new Scanner();

  StringBuilder:
    clase de java para manipular cadenas de texto.
    StringBuilder builder = new StringBuilder(cadena);
    append(),insert(),delete(),reverse();

  Arrays:
    convierte un arrya en string
    Arrays.toString(nombreArray);

Definiciones:
  1.- Scope: es el limite en donde tiene acceso una varible dentro de un bloque de código.
    Donde sea declarada, este dependera su alcance para ser utilizada.